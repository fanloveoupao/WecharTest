package com.example.testwechar;

import java.io.IOException;

import org.apache.harmony.javax.security.sasl.SaslException;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smackx.muc.MultiUserChat;

import android.app.Application;

public class MyApplication extends Application {
	// 在清单文件里面注册使程序一开始就进行执行onCreate的方法
	public static MultiUserChat userChat = null;

	@Override
	public void onCreate() {
		// TODO 自动生成的方法存根
		super.onCreate();
		new Thread() {
			public void run() {
				try {
					// 连接服务器
					ConnectionConfiguration configuration = new ConnectionConfiguration(
							"192.168.1.113", 5222, "pc-201504062324");
					XMPPConnection xmppConnection=new XMPPConnection(configuration) {
						
						@Override
						protected void shutdown() {
							// TODO 自动生成的方法存根
							
						}
						
						@Override
						protected void sendPacketInternal(Packet arg0) throws NotConnectedException {
							// TODO 自动生成的方法存根
							
						}
						
						@Override
						public void loginAnonymously() throws XMPPException, SmackException,
								SaslException, IOException {
							// TODO 自动生成的方法存根
							
						}
						
						@Override
						public void login(String arg0, String arg1, String arg2)
								throws XMPPException, SmackException, SaslException, IOException {
							// TODO 自动生成的方法存根
							
						}
						
						@Override
						public boolean isUsingCompression() {
							// TODO 自动生成的方法存根
							return false;
						}
						
						@Override
						public boolean isSecureConnection() {
							// TODO 自动生成的方法存根
							return false;
						}
						
						@Override
						public boolean isConnected() {
							// TODO 自动生成的方法存根
							return false;
						}
						
						@Override
						public boolean isAuthenticated() {
							// TODO 自动生成的方法存根
							return false;
						}
						
						@Override
						public boolean isAnonymous() {
							// TODO 自动生成的方法存根
							return false;
						}
						
						@Override
						public String getUser() {
							// TODO 自动生成的方法存根
							return null;
						}
						
						@Override
						public String getConnectionID() {
							// TODO 自动生成的方法存根
							return null;
						}
						
						@Override
						protected void connectInternal() throws SmackException, IOException,
								XMPPException {
							// TODO 自动生成的方法存根
							
						}
					};
					xmppConnection.connect();
					if(xmppConnection.isConnected()){
						// 登录
						xmppConnection.login("myfgk", "fangaokui");
						// 加入到房间
						userChat=new MultiUserChat(xmppConnection, "bruse@conference.pc-201504062324");
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}.start();
	}
}
