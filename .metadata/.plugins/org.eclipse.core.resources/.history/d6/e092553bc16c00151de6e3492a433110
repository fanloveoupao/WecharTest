package com.example.testwechar;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.ChatManagerListener;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.packet.Message;

import org.jivesoftware.smackx.muc.MultiUserChat;

import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

public class MyApplication extends Application {
	// 在清单文件里面注册使程序一开始就进行执行onCreate的方法
	public static MultiUserChat userChat = null;
	public static ConnectionConfiguration configuration;
	public static XMPPConnection xmppConnection;

	@Override
	public void onCreate() {
		// TODO 自动生成的方法存根
		super.onCreate();
		new Thread() {
			public void run() {
				try {
					// 连接服务器
					configuration = new ConnectionConfiguration(
							"125.65.82.216", 5222, "125.65.82.216");
					xmppConnection = new XMPPConnection(configuration);
					xmppConnection.connect();
				} catch (Exception e) {
					// TODO: handle exception
				}
			};
		}.start();
		getOnLine(getApplicationContext());
	}

	/**
	 * 获取在线消息
	 * 
	 */
	public static void getOnLine(final Context context) {
		ChatManager cm = MyApplication.xmppConnection.getChatManager();
		cm.addChatListener(new ChatManagerListener() {
			@Override
			public void chatCreated(Chat chat, boolean able) {
				chat.addMessageListener(new MessageListener() {
					@Override
					public void processMessage(Chat chat2, Message message) {
						Log.d("connectMethod:getOnLine()", message.getBody()
								+ message.getFrom());
						sendBroadcastMsg(context, message.getBody());
					}
				});
			}
		});
	}

	/**
	 * 
	 * 设置广播进行接收
	 * 
	 * */
	private static void sendBroadcastMsg(Context context, String txt) {
		Intent intent = new Intent();
		intent.setAction("msg_receiver");
		intent.putExtra("msg", txt);
		context.sendBroadcast(intent);
	}
}
